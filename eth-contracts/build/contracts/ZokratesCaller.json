{
  "contractName": "ZokratesCaller",
  "abi": [],
  "metadata": "{\"compiler\":{\"version\":\"0.5.16+commit.9c3226ce\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"project:/contracts/SolnSquareVerifier.sol\":\"ZokratesCaller\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/SolnSquareVerifier.sol\":{\"keccak256\":\"0x722652919e514616cfe1041a5434d6302e187a741d8435068e72c5cf9b8d8cf0\",\"urls\":[\"bzz-raw://dbbc4ea879630a3aed6126d8785863314484fd5c04baa08c3dd37d93dacfae71\",\"dweb:/ipfs/QmSZGrz1gqFnufLmHPYQNfJd3oDuhMaqqw4C14HMPPeoP6\"]}},\"version\":1}",
  "bytecode": "0x6080604052348015600f57600080fd5b50603e80601d6000396000f3fe6080604052600080fdfea265627a7a7231582028fd532bf9857b8832e6fa38245007ca6c9c9000c161722c2b67dbd1ad874eb864736f6c63430005100032",
  "deployedBytecode": "0x6080604052600080fdfea265627a7a7231582028fd532bf9857b8832e6fa38245007ca6c9c9000c161722c2b67dbd1ad874eb864736f6c63430005100032",
  "sourceMap": "142:32:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;142:32:0;;;;;;;",
  "deployedSourceMap": "142:32:0:-;;;;;",
  "source": "pragma solidity >=0.4.21 <0.6.0;\n\n// TODO define a contract call to the zokrates generated solidity contract <Verifier> or <renamedVerifier>\n\ncontract ZokratesCaller {\n    \n}\n\n\n\n// TODO define another contract named SolnSquareVerifier that inherits from your ERC721Mintable class\n\n\n\n// TODO define a solutions struct that can hold an index & an address\n\n\n// TODO define an array of the above struct\n\n\n// TODO define a mapping to store unique solutions submitted\n\n\n\n// TODO Create an event to emit when a solution is added\n\n\n\n// TODO Create a function to add the solutions to the array and emit the event\n\n\n\n// TODO Create a function to mint new NFT only after the solution has been verified\n//  - make sure the solution is unique (has not been used before)\n//  - make sure you handle metadata as well as tokenSuplly\n\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
  "sourcePath": "/home/alex/proiecte/p6/Blockchain-Capstone/eth-contracts/contracts/SolnSquareVerifier.sol",
  "ast": {
    "absolutePath": "project:/contracts/SolnSquareVerifier.sol",
    "exportedSymbols": {
      "ZokratesCaller": [
        2
      ]
    },
    "id": 3,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          ">=",
          "0.4",
          ".21",
          "<",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:32:0"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 2,
        "linearizedBaseContracts": [
          2
        ],
        "name": "ZokratesCaller",
        "nodeType": "ContractDefinition",
        "nodes": [],
        "scope": 3,
        "src": "142:32:0"
      }
    ],
    "src": "0:846:0"
  },
  "legacyAST": {
    "attributes": {
      "absolutePath": "project:/contracts/SolnSquareVerifier.sol",
      "exportedSymbols": {
        "ZokratesCaller": [
          2
        ]
      }
    },
    "children": [
      {
        "attributes": {
          "literals": [
            "solidity",
            ">=",
            "0.4",
            ".21",
            "<",
            "0.6",
            ".0"
          ]
        },
        "id": 1,
        "name": "PragmaDirective",
        "src": "0:32:0"
      },
      {
        "attributes": {
          "baseContracts": [
            null
          ],
          "contractDependencies": [
            null
          ],
          "contractKind": "contract",
          "documentation": null,
          "fullyImplemented": true,
          "linearizedBaseContracts": [
            2
          ],
          "name": "ZokratesCaller",
          "nodes": [
            null
          ],
          "scope": 3
        },
        "id": 2,
        "name": "ContractDefinition",
        "src": "142:32:0"
      }
    ],
    "id": 3,
    "name": "SourceUnit",
    "src": "0:846:0"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.16+commit.9c3226ce.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.3",
  "updatedAt": "2022-01-06T22:05:20.163Z",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  }
}